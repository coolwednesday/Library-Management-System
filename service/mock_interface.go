// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/libraryManagementSystem/models"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockBookStorer is a mock of BookStorer interface.
type MockBookStorer struct {
	ctrl     *gomock.Controller
	recorder *MockBookStorerMockRecorder
}

// MockBookStorerMockRecorder is the mock recorder for MockBookStorer.
type MockBookStorerMockRecorder struct {
	mock *MockBookStorer
}

// NewMockBookStorer creates a new mock instance.
func NewMockBookStorer(ctrl *gomock.Controller) *MockBookStorer {
	mock := &MockBookStorer{ctrl: ctrl}
	mock.recorder = &MockBookStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookStorer) EXPECT() *MockBookStorerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBookStorer) Add(ctx *gofr.Context, isbn int, title, author string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, isbn, title, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBookStorerMockRecorder) Add(ctx, isbn, title, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBookStorer)(nil).Add), ctx, isbn, title, author)
}

// Borrow mocks base method.
func (m *MockBookStorer) Borrow(arg0 *gofr.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Borrow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Borrow indicates an expected call of Borrow.
func (mr *MockBookStorerMockRecorder) Borrow(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Borrow", reflect.TypeOf((*MockBookStorer)(nil).Borrow), arg0, arg1, arg2)
}

// CheckAvailibleBook mocks base method.
func (m *MockBookStorer) CheckAvailibleBook(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailibleBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAvailibleBook indicates an expected call of CheckAvailibleBook.
func (mr *MockBookStorerMockRecorder) CheckAvailibleBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailibleBook", reflect.TypeOf((*MockBookStorer)(nil).CheckAvailibleBook), arg0, arg1)
}

// CheckBook mocks base method.
func (m *MockBookStorer) CheckBook(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckBook indicates an expected call of CheckBook.
func (mr *MockBookStorerMockRecorder) CheckBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBook", reflect.TypeOf((*MockBookStorer)(nil).CheckBook), arg0, arg1)
}

// List mocks base method.
func (m *MockBookStorer) List(arg0 *gofr.Context, arg1 int) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBookStorerMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBookStorer)(nil).List), arg0, arg1)
}

// ListAvailible mocks base method.
func (m *MockBookStorer) ListAvailible(arg0 *gofr.Context) ([]*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailible", arg0)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailible indicates an expected call of ListAvailible.
func (mr *MockBookStorerMockRecorder) ListAvailible(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailible", reflect.TypeOf((*MockBookStorer)(nil).ListAvailible), arg0)
}

// Remove mocks base method.
func (m *MockBookStorer) Remove(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockBookStorerMockRecorder) Remove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBookStorer)(nil).Remove), arg0, arg1)
}

// Returnbook mocks base method.
func (m *MockBookStorer) Returnbook(arg0 *gofr.Context, arg1 int) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Returnbook", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Returnbook indicates an expected call of Returnbook.
func (mr *MockBookStorerMockRecorder) Returnbook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returnbook", reflect.TypeOf((*MockBookStorer)(nil).Returnbook), arg0, arg1)
}

// UpdateBook mocks base method.
func (m *MockBookStorer) UpdateBook(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookStorerMockRecorder) UpdateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookStorer)(nil).UpdateBook), arg0, arg1)
}

// MockUserStorer is a mock of UserStorer interface.
type MockUserStorer struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorerMockRecorder
}

// MockUserStorerMockRecorder is the mock recorder for MockUserStorer.
type MockUserStorerMockRecorder struct {
	mock *MockUserStorer
}

// NewMockUserStorer creates a new mock instance.
func NewMockUserStorer(ctrl *gomock.Controller) *MockUserStorer {
	mock := &MockUserStorer{ctrl: ctrl}
	mock.recorder = &MockUserStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorer) EXPECT() *MockUserStorerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserStorer) Add(arg0 *gofr.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUserStorerMockRecorder) Add(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserStorer)(nil).Add), arg0, arg1, arg2)
}

// CheckUser mocks base method.
func (m *MockUserStorer) CheckUser(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockUserStorerMockRecorder) CheckUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockUserStorer)(nil).CheckUser), arg0, arg1)
}

// List mocks base method.
func (m *MockUserStorer) List(arg0 *gofr.Context, arg1 int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserStorerMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserStorer)(nil).List), arg0, arg1)
}

// ListAll mocks base method.
func (m *MockUserStorer) ListAll(arg0 *gofr.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockUserStorerMockRecorder) ListAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockUserStorer)(nil).ListAll), arg0)
}

// Remove mocks base method.
func (m *MockUserStorer) Remove(arg0 *gofr.Context, arg1 int) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockUserStorerMockRecorder) Remove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUserStorer)(nil).Remove), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserStorer) UpdateUser(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserStorerMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserStorer)(nil).UpdateUser), arg0, arg1)
}
