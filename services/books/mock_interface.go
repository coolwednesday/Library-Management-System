// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=books
//

// Package books is a generated GoMock package.
package books

import (
	models "SimpleRESTApi/models"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBookStorer is a mock of BookStorer interface.
type MockBookStorer struct {
	ctrl     *gomock.Controller
	recorder *MockBookStorerMockRecorder
}

// MockBookStorerMockRecorder is the mock recorder for MockBookStorer.
type MockBookStorerMockRecorder struct {
	mock *MockBookStorer
}

// NewMockBookStorer creates a new mock instance.
func NewMockBookStorer(ctrl *gomock.Controller) *MockBookStorer {
	mock := &MockBookStorer{ctrl: ctrl}
	mock.recorder = &MockBookStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookStorer) EXPECT() *MockBookStorerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBookStorer) Add(isbn int, title, author string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", isbn, title, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBookStorerMockRecorder) Add(isbn, title, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBookStorer)(nil).Add), isbn, title, author)
}

// Borrow mocks base method.
func (m *MockBookStorer) Borrow(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Borrow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Borrow indicates an expected call of Borrow.
func (mr *MockBookStorerMockRecorder) Borrow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Borrow", reflect.TypeOf((*MockBookStorer)(nil).Borrow), arg0, arg1)
}

// CheckAvailibleBook mocks base method.
func (m *MockBookStorer) CheckAvailibleBook(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailibleBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAvailibleBook indicates an expected call of CheckAvailibleBook.
func (mr *MockBookStorerMockRecorder) CheckAvailibleBook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailibleBook", reflect.TypeOf((*MockBookStorer)(nil).CheckAvailibleBook), arg0)
}

// CheckBook mocks base method.
func (m *MockBookStorer) CheckBook(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckBook indicates an expected call of CheckBook.
func (mr *MockBookStorerMockRecorder) CheckBook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBook", reflect.TypeOf((*MockBookStorer)(nil).CheckBook), arg0)
}

// List mocks base method.
func (m *MockBookStorer) List(isbn int) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", isbn)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBookStorerMockRecorder) List(isbn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBookStorer)(nil).List), isbn)
}

// ListAvailible mocks base method.
func (m *MockBookStorer) ListAvailible() (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailible")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailible indicates an expected call of ListAvailible.
func (mr *MockBookStorerMockRecorder) ListAvailible() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailible", reflect.TypeOf((*MockBookStorer)(nil).ListAvailible))
}

// Remove mocks base method.
func (m *MockBookStorer) Remove(arg0 int) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockBookStorerMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBookStorer)(nil).Remove), arg0)
}

// Returnbook mocks base method.
func (m *MockBookStorer) Returnbook(arg0 int) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Returnbook", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Returnbook indicates an expected call of Returnbook.
func (mr *MockBookStorerMockRecorder) Returnbook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returnbook", reflect.TypeOf((*MockBookStorer)(nil).Returnbook), arg0)
}

// UpdateBook mocks base method.
func (m *MockBookStorer) UpdateBook(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookStorerMockRecorder) UpdateBook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookStorer)(nil).UpdateBook), arg0)
}
