// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interface.go -package=books
//

// Package books is a generated GoMock package.
package books

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBookStorer is a mock of BookStorer interface.
type MockBookStorer struct {
	ctrl     *gomock.Controller
	recorder *MockBookStorerMockRecorder
}

// MockBookStorerMockRecorder is the mock recorder for MockBookStorer.
type MockBookStorerMockRecorder struct {
	mock *MockBookStorer
}

// NewMockBookStorer creates a new mock instance.
func NewMockBookStorer(ctrl *gomock.Controller) *MockBookStorer {
	mock := &MockBookStorer{ctrl: ctrl}
	mock.recorder = &MockBookStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookStorer) EXPECT() *MockBookStorerMockRecorder {
	return m.recorder
}

// add mocks base method.
func (m *MockBookStorer) add(isbn int, title, author string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "add", isbn, title, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// add indicates an expected call of add.
func (mr *MockBookStorerMockRecorder) add(isbn, title, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "add", reflect.TypeOf((*MockBookStorer)(nil).add), isbn, title, author)
}

// list mocks base method.
func (m *MockBookStorer) list(isbn int) (*Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "list", isbn)
	ret0, _ := ret[0].(*Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// list indicates an expected call of list.
func (mr *MockBookStorerMockRecorder) list(isbn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "list", reflect.TypeOf((*MockBookStorer)(nil).list), isbn)
}

// listavailible mocks base method.
func (m *MockBookStorer) listavailible() ([]*Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listavailible")
	ret0, _ := ret[0].([]*Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listavailible indicates an expected call of listavailible.
func (mr *MockBookStorerMockRecorder) listavailible() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listavailible", reflect.TypeOf((*MockBookStorer)(nil).listavailible))
}

// remove mocks base method.
func (m *MockBookStorer) remove(isbn int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "remove", isbn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// remove indicates an expected call of remove.
func (mr *MockBookStorerMockRecorder) remove(isbn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "remove", reflect.TypeOf((*MockBookStorer)(nil).remove), isbn)
}

// MockRecordStorer is a mock of RecordStorer interface.
type MockRecordStorer struct {
	ctrl     *gomock.Controller
	recorder *MockRecordStorerMockRecorder
}

// MockRecordStorerMockRecorder is the mock recorder for MockRecordStorer.
type MockRecordStorerMockRecorder struct {
	mock *MockRecordStorer
}

// NewMockRecordStorer creates a new mock instance.
func NewMockRecordStorer(ctrl *gomock.Controller) *MockRecordStorer {
	mock := &MockRecordStorer{ctrl: ctrl}
	mock.recorder = &MockRecordStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordStorer) EXPECT() *MockRecordStorerMockRecorder {
	return m.recorder
}

// borrow mocks base method.
func (m *MockRecordStorer) borrow(arg0, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "borrow", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// borrow indicates an expected call of borrow.
func (mr *MockRecordStorerMockRecorder) borrow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "borrow", reflect.TypeOf((*MockRecordStorer)(nil).borrow), arg0, arg1)
}

// returnbook mocks base method.
func (m *MockRecordStorer) returnbook(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "returnbook", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// returnbook indicates an expected call of returnbook.
func (mr *MockRecordStorerMockRecorder) returnbook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "returnbook", reflect.TypeOf((*MockRecordStorer)(nil).returnbook), arg0)
}
